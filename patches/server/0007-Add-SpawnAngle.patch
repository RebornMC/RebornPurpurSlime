From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: iVirus <edoardomannino@gmail.com>
Date: Thu, 16 Nov 2023 01:28:38 +0100
Subject: [PATCH] Add-SpawnAngle


diff --git a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
index 65b475b1292e01c918c1f8144599b5fa78688e97..313b11bd42f10896a75f8fb8ae2ba8bb21a1c3fd 100644
--- a/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
+++ b/src/main/java/com/infernalsuite/aswm/level/SlimeLevelInstance.java
@@ -95,7 +95,10 @@ public class SlimeLevelInstance extends ServerLevel {
         SlimePropertyMap propertyMap = slimeBootstrap.initial().getPropertyMap();
 
         this.serverLevelData.setDifficulty(Difficulty.valueOf(propertyMap.getValue(SlimeProperties.DIFFICULTY).toUpperCase()));
-        this.serverLevelData.setSpawn(new BlockPos(propertyMap.getValue(SlimeProperties.SPAWN_X), propertyMap.getValue(SlimeProperties.SPAWN_Y), propertyMap.getValue(SlimeProperties.SPAWN_Z)), 0);
+        this.serverLevelData.setSpawn(new BlockPos(propertyMap.getValue(SlimeProperties.SPAWN_X),
+                propertyMap.getValue(SlimeProperties.SPAWN_Y),
+                propertyMap.getValue(SlimeProperties.SPAWN_Z)),
+                propertyMap.getValue(SlimeProperties.SPAWN_ANGLE));
         super.setSpawnSettings(propertyMap.getValue(SlimeProperties.ALLOW_MONSTERS), propertyMap.getValue(SlimeProperties.ALLOW_ANIMALS));
 
         this.pvpMode = propertyMap.getValue(SlimeProperties.PVP);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 3b153d96b08c5591b4a322a2bbd5986257d4609a..eef979a122a91e5e5d7bbe332c3633ef7ef9bb62 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -4,10 +4,14 @@ import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import com.infernalsuite.aswm.api.SlimePlugin;
+import com.infernalsuite.aswm.api.world.SlimeWorld;
+import com.infernalsuite.aswm.api.world.properties.SlimeProperties;
 import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -24,6 +28,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
@@ -285,6 +290,15 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public boolean setSpawnLocation(Location location) {
         Preconditions.checkArgument(location != null, "location");
 
+        SlimePlugin slimePlugin = (SlimePlugin) server.getPluginManager().getPlugin("SlimeWorldManager");
+        SlimeWorld slimeWorld = slimePlugin.getWorld(location.getWorld().getName());
+        if (slimeWorld != null) {
+            slimeWorld.getPropertyMap().setValue(SlimeProperties.SPAWN_X, (int) location.getX());
+            slimeWorld.getPropertyMap().setValue(SlimeProperties.SPAWN_Y, (int)  location.getY());
+            slimeWorld.getPropertyMap().setValue(SlimeProperties.SPAWN_Z, (int)  location.getZ());
+            slimeWorld.getPropertyMap().setValue(SlimeProperties.SPAWN_ANGLE, location.getYaw());
+        }
+
         return this.equals(location.getWorld()) ? this.setSpawnLocation(location.getBlockX(), location.getBlockY(), location.getBlockZ(), location.getYaw()) : false;
     }
 
@@ -310,6 +324,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public boolean setSpawnLocation(int x, int y, int z) {
         return this.setSpawnLocation(x, y, z, 0.0F);
     }
+
     // Paper start
     private static void warnUnsafeChunk(String reason, int x, int z) {
         // if any chunk coord is outside of 30 million blocks
@@ -469,15 +484,15 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             }
 
             final java.util.concurrent.CompletableFuture<com.mojang.datafixers.util.Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> future = chunkStatus.generate(
-                Runnable::run,
-                serverLevel,
-                serverChunkCache.getGenerator(),
-                serverLevel.getStructureManager(),
-                serverChunkCache.getLightEngine(),
-                chunk -> {
-                    throw new UnsupportedOperationException("Not creating full chunks here");
-                },
-                list
+                    Runnable::run,
+                    serverLevel,
+                    serverChunkCache.getGenerator(),
+                    serverLevel.getStructureManager(),
+                    serverChunkCache.getLightEngine(),
+                    chunk -> {
+                        throw new UnsupportedOperationException("Not creating full chunks here");
+                    },
+                    list
             );
             serverChunkCache.mainThreadProcessor.managedBlock(future::isDone);
             if (chunkStatus == ChunkStatus.NOISE) {
@@ -490,12 +505,14 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         }
 
         final Set<ChunkPos> chunksToRelight = new HashSet<>(9);
-        for (int chunkX = chunkPos.x - 1; chunkX <= chunkPos.x + 1 ; chunkX++) {
-            for (int chunkZ = chunkPos.z - 1; chunkZ <= chunkPos.z + 1 ; chunkZ++) {
+        for (int chunkX = chunkPos.x - 1; chunkX <= chunkPos.x + 1; chunkX++) {
+            for (int chunkZ = chunkPos.z - 1; chunkZ <= chunkPos.z + 1; chunkZ++) {
                 chunksToRelight.add(new ChunkPos(chunkX, chunkZ));
             }
         }
-        serverChunkCache.getLightEngine().relight(chunksToRelight, pos -> {}, relit -> {});
+        serverChunkCache.getLightEngine().relight(chunksToRelight, pos -> {
+        }, relit -> {
+        });
         return true;
         // Paper end
     }
@@ -511,20 +528,20 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             return false;
         }
         // Paper end - rewrite player chunk loader
-                List<ServerPlayer> playersInRange = playerChunk.playerProvider.getPlayers(playerChunk.getPos(), false);
-                if (playersInRange.isEmpty()) return true; // Paper - rewrite player chunk loader
-
-                // Paper start - Anti-Xray - Bypass
-                Map<Object, ClientboundLevelChunkWithLightPacket> refreshPackets = new HashMap<>();
-                for (ServerPlayer player : playersInRange) {
-                    if (player.connection == null) continue;
-
-                    Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
-                    player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
-                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, (Boolean) s);
-                    }));
-                    // Paper end
-                }
+        List<ServerPlayer> playersInRange = playerChunk.playerProvider.getPlayers(playerChunk.getPos(), false);
+        if (playersInRange.isEmpty()) return true; // Paper - rewrite player chunk loader
+
+        // Paper start - Anti-Xray - Bypass
+        Map<Object, ClientboundLevelChunkWithLightPacket> refreshPackets = new HashMap<>();
+        for (ServerPlayer player : playersInRange) {
+            if (player.connection == null) continue;
+
+            Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
+            player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
+                return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, (Boolean) s);
+            }));
+            // Paper end
+        }
         // Paper - rewrite player chunk loader
 
         return true;
@@ -780,10 +797,10 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     @Override
     public Location findLightningRod(Location location) {
         return this.world.findLightningRod(io.papermc.paper.util.MCUtil.toBlockPosition(location))
-            .map(blockPos -> io.papermc.paper.util.MCUtil.toLocation(this.world, blockPos)
-                // get the actual rod pos
-                .subtract(0, 1, 0))
-            .orElse(null);
+                .map(blockPos -> io.papermc.paper.util.MCUtil.toLocation(this.world, blockPos)
+                        // get the actual rod pos
+                        .subtract(0, 1, 0))
+                .orElse(null);
     }
 
     @Override
@@ -912,6 +929,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, Entity source) {
         return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, breakBlocks ? net.minecraft.world.level.Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
+
     // Paper start
     @Override
     public boolean createExplosion(Entity source, Location loc, float power, boolean setFire, boolean breakBlocks) {
@@ -1796,6 +1814,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         // Paper start
         return this.getSpawnLimitUnsafe(spawnCategory);
     }
+
     public final int getSpawnLimitUnsafe(final SpawnCategory spawnCategory) {
         int limit = this.spawnCategoryLimit.getOrDefault(spawnCategory, -1);
         if (limit < 0) {
@@ -1858,7 +1877,8 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public void playSound(Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
+        if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null)
+            return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(CraftSound.bukkitToMinecraftHolder(sound), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, this.getHandle().getRandom().nextLong());
         ChunkMap.TrackedEntity entityTracker = this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
@@ -1869,7 +1889,8 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public void playSound(Entity entity, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
-        if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
+        if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null)
+            return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, this.getHandle().getRandom().nextLong());
         ChunkMap.TrackedEntity entityTracker = this.getHandle().getChunkSource().chunkMap.entityMap.get(entity.getEntityId());
@@ -1877,6 +1898,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             entityTracker.broadcastAndSend(packet);
         }
     }
+
     // Paper start - Adventure
     @Override
     public void playSound(final net.kyori.adventure.sound.Sound sound) {
@@ -1912,6 +1934,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper end
 
     private static Map<String, GameRules.Key<?>> gamerules;
+
     public static synchronized Map<String, GameRules.Key<?>> getGameRulesNMS() {
         if (CraftWorld.gamerules != null) {
             return CraftWorld.gamerules;
@@ -1929,6 +1952,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     private static Map<String, GameRules.Type<?>> gameruleDefinitions;
+
     public static synchronized Map<String, GameRules.Type<?>> getGameRuleDefinitions() {
         if (CraftWorld.gameruleDefinitions != null) {
             return CraftWorld.gameruleDefinitions;
@@ -2252,7 +2276,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public void sendGameEvent(Entity sourceEntity, org.bukkit.GameEvent gameEvent, Vector position) {
-        getHandle().gameEvent(sourceEntity != null ? ((CraftEntity) sourceEntity).getHandle(): null, net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT.get(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(gameEvent.getKey())), org.bukkit.craftbukkit.util.CraftVector.toBlockPos(position));
+        getHandle().gameEvent(sourceEntity != null ? ((CraftEntity) sourceEntity).getHandle() : null, net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT.get(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(gameEvent.getKey())), org.bukkit.craftbukkit.util.CraftVector.toBlockPos(position));
     }
     // Paper end
 
@@ -2333,7 +2357,8 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Override
     public void sendBlockHighlight(Location location, int duration, String text, org.bukkit.Color color, int transparency) {
-        if (transparency < 0 || transparency > 255) throw new IllegalArgumentException("transparency is outside of 0-255 range");
+        if (transparency < 0 || transparency > 255)
+            throw new IllegalArgumentException("transparency is outside of 0-255 range");
         sendBlockHighlight(location, duration, text, transparency << 24 | color.asRGB());
     }
 
@@ -2375,6 +2400,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public int getSimulationDistance() {
         return this.getHandle().playerChunkLoader.getAPITickDistance(); // Paper - replace player chunk loader
     }
+
     // Spigot end
     // Paper start - view distance api
     @Override
@@ -2417,8 +2443,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper end - view distance api
 
     // Spigot start
-    private final org.bukkit.World.Spigot spigot = new org.bukkit.World.Spigot()
-    {
+    private final org.bukkit.World.Spigot spigot = new org.bukkit.World.Spigot() {
 
         @Override
         public LightningStrike strikeLightning(Location loc, boolean isSilent)
@@ -2426,7 +2451,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             LightningBolt lightning = EntityType.LIGHTNING_BOLT.create( CraftWorld.this.world );
             lightning.moveTo( loc.getX(), loc.getY(), loc.getZ() );
             lightning.isSilent = isSilent;
-            CraftWorld.this.world.strikeLightning( lightning, LightningStrikeEvent.Cause.CUSTOM );
+            CraftWorld.this.world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM);
             return (LightningStrike) lightning.getBukkitEntity();
         }
 
@@ -2437,15 +2462,15 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             lightning.moveTo( loc.getX(), loc.getY(), loc.getZ() );
             lightning.visualOnly = true;
             lightning.isSilent = isSilent;
-            CraftWorld.this.world.strikeLightning( lightning, LightningStrikeEvent.Cause.CUSTOM );
+            CraftWorld.this.world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM);
             return (LightningStrike) lightning.getBukkitEntity();
         }
     };
 
-    public org.bukkit.World.Spigot spigot()
-    {
+    public org.bukkit.World.Spigot spigot() {
         return this.spigot;
     }
+
     // Spigot end
     // Paper start
     public java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen, boolean urgent) {
@@ -2468,7 +2493,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
         io.papermc.paper.chunk.system.ChunkSystem.scheduleChunkLoad(this.getHandle(), x, z, gen, ChunkStatus.FULL, true, priority, (c) -> {
             net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
-                net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk)c;
+                net.minecraft.world.level.chunk.LevelChunk chunk = (net.minecraft.world.level.chunk.LevelChunk) c;
                 if (chunk != null) this.addTicket(x, z); // Paper
                 ret.complete(chunk == null ? null : new CraftChunk(chunk));
             });
@@ -2482,9 +2507,9 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public net.kyori.adventure.pointer.Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
-                .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
-                .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUID)
-                .build();
+                    .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
+                    .withDynamic(net.kyori.adventure.identity.Identity.UUID, this::getUID)
+                    .build();
         }
 
         return this.adventure$pointers;
